version: '3.8'
services:
# Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - backend
  kafka:
    image: confluentinc/cp-kafka:latest
    ports:
      - 9092:9092
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_MIN_INSYNC_REPLICAS: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    networks:
      - backend

  # 주문 서비스
  order-service:
    build:
      context: ./order-service
    ports:
      - "8081:8080"
      - "5005:5005"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/actuator/health" ]
      interval: 5s
      timeout: 3s
      retries: 10
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - JAVA_TOOL_OPTIONS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005
    depends_on:
      - order-mysql-db
    networks:
      - backend
    platform: linux/amd64
  order-mysql-db:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: order!2#
      MYSQL_DATABASE: ORDER
    ports:
      - "3306:3306"
    networks:
      - backend
    volumes:
      - ./init/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
      - ./init/order.sql:/docker-entrypoint-initdb.d/order.sql

# 결제 서비스
  payment-service:
    build:
      context: ./payment-service
    ports:
      - "8082:8080"
      - "5006:5005"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8082/actuator/health" ]
      interval: 5s
      timeout: 3s
      retries: 10
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - JAVA_TOOL_OPTIONS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005
    depends_on:
      - payment-mysql-db
    networks:
      - backend
    platform: linux/amd64
  payment-mysql-db:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: payment!2#
      MYSQL_DATABASE: payment
    ports:
      - "3307:3306"
    networks:
      - backend
    volumes:
      - ./init/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
      - ./init/payment.sql:/docker-entrypoint-initdb.d/payment.sql

# 재고 서비스
  inventory-service:
    build:
      context: ./inventory-service
    ports:
      - "8083:8080"
      - "5007:5005"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8083/actuator/health" ]
      interval: 5s
      timeout: 3s
      retries: 10
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - JAVA_TOOL_OPTIONS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005
    depends_on:
      - inventory-mysql-db
    networks:
      - backend
    platform: linux/amd64
  inventory-mysql-db:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: inventory!2#
      MYSQL_DATABASE: inventory
    ports:
      - "3308:3306"
    networks:
      - backend
    volumes:
      - ./init/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
      - ./init/inventory.sql:/docker-entrypoint-initdb.d/inventory.sql

#Docker 네트워크 설정
networks:
  backend:
    name: backend
    driver: bridge